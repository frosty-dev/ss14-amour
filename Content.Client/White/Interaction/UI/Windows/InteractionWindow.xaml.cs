using Content.Shared.White.ShittyInteraction;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Client.Utility;

namespace Content.Client.White.Interaction.UI.Windows
{
    [GenerateTypedNameReferences]
    public sealed partial class InteractionWindow : DefaultWindow
    {
        private List<InteractionActionPrototype> _interaction = new();
        private Action<InteractionActionPrototype>? _onInteractionSelect;
        public InteractionWindow()
        {
            RobustXamlLoader.Load(this);
            Query.OnTextChanged += TextChanged;
        }

        public void SetSelectListener(Action<InteractionActionPrototype> interaction)
        {
            _onInteractionSelect = interaction;
        }

        public void UpdateInteractions(List<InteractionActionPrototype> interactions)
        {
            _interaction = interactions;
            UpdateInteractions();
        }

        private void UpdateInteractions()
        {
            InteractionsContainer.Children.Clear();
            foreach (var interaction in _interaction)
            {
                var name = Loc.GetString(interaction.DisplayName);

                if (!string.IsNullOrEmpty(Query.Text) && !name.Contains(Query.Text))
                    continue;


                var container = new InteractionContainer()
                {
                    Name = name,
                    OnClick = (_) => _onInteractionSelect!(interaction)
                };

                if (interaction.Icon != null)
                {
                    container.Icon = interaction.Icon.Frame0();
                }

                InteractionsContainer.Children.Add(container);
            }
        }

        public void TextChanged(LineEdit.LineEditEventArgs args)
        {
            UpdateInteractions();
        }
    }
}
